# -*- coding: utf-8 -*-
"""Yolov8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/100s8nazqVHFW8LqCn1MYbna43hh9fXob
"""

!nvidia-smi

from google.colab import drive
drive.mount('/content/drive')

!pip install ultralytics

!pip list

import os
HOME = os.getcwd()
print(HOME)

from ultralytics import YOLO

model = YOLO("yolov8n.pt")
model.train(data="coco128.yaml", epochs=3)
metrics = model.val()  # evaluate model performance on the validation set
results = model("https://ultralytics.com/images/bus.jpg")  # predict on an image
path = model.export(format="onnx")  # export the model to ONNX format

print(results)

from ultralytics import YOLO

# Load a model
model = YOLO("yolov8n.yaml")  # build a new model from scratch
model = YOLO("yolov8n.pt")  # load a pretrained model (recommended for training)

# Use the model
model.train(data="coco128.yaml", epochs=3)  # train the model
metrics = model.val()  # evaluate model performance on the validation set
results = model("https://ultralytics.com/images/bus.jpg")  # predict on an image
path = model.export(format="onnx")  # export the model to ONNX format

!yolo predict model=yolov8n.pt source='https://ultralytics.com/images/bus.jpg'
print(results)

import random

import cv2
import numpy as np
from ultralytics import YOLO

from ultralytics import YOLO
import numpy

# load a pretrained YOLOv8n model
model = YOLO("yolov8n.pt", "v8")

# predict on an image
detection_output = model.predict(source="https://ultralytics.com/images/bus.jpg", conf=0.25, save=True)

# Display tensor array
print(detection_output)

# Display numpy array
print(detection_output[0].numpy())

import cv2

# Load the YOLOv8n model
model = YOLO("weights/yolov8n.pt", "v8")


detection_colors = []
for i in range(len(class_list)):
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    detection_colors.append((b, g, r))
# Load the image
image = cv2.imread("https://ultralytics.com/images/bus.jpg")

# Predict on the image
detect_params = model.predict(source="https://ultralytics.com/images/bus.jpg", conf=0.25, save=True)

# Process detection results
DP = detect_params[0].numpy()
if len(DP) != 0:
        for i in range(len(detect_params[0])):
            print(i)

            boxes = detect_params[0].boxes
            box = boxes[i]  # returns one box
            clsID = box.cls.numpy()[0]
            conf = box.conf.numpy()[0]
            bb = box.xyxy.numpy()[0]

            cv2.rectangle(
                frame,
                (int(bb[0]), int(bb[1])),
                (int(bb[2]), int(bb[3])),
                detection_colors[int(clsID)],
                3,
            )

            # Display class name and confidence
            font = cv2.FONT_HERSHEY_COMPLEX
            cv2.putText(
                frame,
                class_list[int(clsID)] + " " + str(round(conf, 3)) + "%",
                (int(bb[0]), int(bb[1]) - 10),
                font,
                1,
                (255, 255, 255),
                2,
            )

        font = cv2.FONT_HERSHEY_COMPLEX
        cv2.putText(
            image,
            class_list[int(clsID)] + " " + str(round(conf, 3)) + "%",
            (int(bb[0]), int(bb[1]) - 10),
            font,
            1,
            (255, 255, 255),
            2,
        )

# Save the modified image
cv2.imwrite("output_image.jpg", image)

